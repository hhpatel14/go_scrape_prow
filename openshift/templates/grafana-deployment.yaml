apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
    app: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: grafana
        app : grafana
    spec:
      containers:
        - env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: GF_AUTH_ANONYMOUS_ENABLED
                  name: grafana-env
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  key: GF_INSTALL_PLUGINS
                  name: grafana-env
            - name: GF_SMTP_ENABLED
              value: "false"
            - name: GF_USERS_ALLOW_ORG_CREATE
              valueFrom:
                configMapKeyRef:
                  key: GF_USERS_ALLOW_ORG_CREATE
                  name: grafana-env
            - name: GF_USERS_ALLOW_SIGN_UP
              valueFrom:
                configMapKeyRef:
                  key: GF_USERS_ALLOW_SIGN_UP
                  name: grafana-env
          image: grafana/grafana:8.4.6
          name: grafana
          securityContext:
            privileged : true
          ports:
            - name: front 
              containerPort: 3000
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-volume
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
          image: image-registry.openshift-image-registry.svc:5000/go-scrape-prow/grafana-sidecar:latest
          name: grafana-sidecar
          securityContext:
            privileged: true
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-volume
      restartPolicy: Always
      volumes:
        - name: grafana-volume
          persistentVolumeClaim:
            claimName: grafana-volume
status: {}
